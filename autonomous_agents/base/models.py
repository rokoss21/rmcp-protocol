"""
Common models for autonomous agents
"""

from typing import Dict, Any, List, Optional, Union
from pydantic import BaseModel, Field
from enum import Enum
from datetime import datetime


class TaskStatus(str, Enum):
    """Task execution status"""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class TaskPriority(str, Enum):
    """Task priority levels"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class AgentRequest(BaseModel):
    """Request model for agent execution"""
    task_id: str = Field(..., description="Unique task identifier")
    task_type: str = Field(..., description="Type of task to execute")
    goal: str = Field(..., description="The goal to achieve")
    context: Dict[str, Any] = Field(default_factory=dict, description="Additional context")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Task-specific parameters")
    priority: TaskPriority = Field(default=TaskPriority.MEDIUM, description="Task priority")
    timeout_ms: int = Field(default=30000, description="Task timeout in milliseconds")
    dependencies: List[str] = Field(default_factory=list, description="Task dependencies")
    outputs: List[str] = Field(default_factory=list, description="Expected output variables")


class AgentResponse(BaseModel):
    """Response model for agent execution"""
    task_id: str = Field(..., description="Task identifier")
    status: TaskStatus = Field(..., description="Execution status")
    result: Optional[Dict[str, Any]] = Field(None, description="Execution result")
    error: Optional[str] = Field(None, description="Error message if failed")
    artifacts: List[Dict[str, Any]] = Field(default_factory=list, description="Generated artifacts")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Execution metadata")
    execution_time_ms: int = Field(..., description="Execution time in milliseconds")
    created_at: datetime = Field(default_factory=datetime.utcnow)


class TaskResult(BaseModel):
    """Result of task execution"""
    task_id: str = Field(..., description="Task identifier")
    status: TaskStatus = Field(..., description="Execution status")
    artifacts: List[Dict[str, Any]] = Field(default_factory=list, description="Generated artifacts")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Result metadata")
    error: Optional[str] = Field(None, description="Error message if failed")
    execution_time_ms: int = Field(..., description="Execution time")


class Task(BaseModel):
    """Task model for project management"""
    id: str = Field(..., description="Unique task identifier")
    name: str = Field(..., description="Task name")
    description: str = Field(..., description="Task description")
    task_type: str = Field(..., description="Type of task")
    agent_type: str = Field(..., description="Required agent type")
    status: TaskStatus = Field(default=TaskStatus.PENDING, description="Task status")
    priority: TaskPriority = Field(default=TaskPriority.MEDIUM, description="Task priority")
    dependencies: List[str] = Field(default_factory=list, description="Task dependencies")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Task parameters")
    outputs: List[str] = Field(default_factory=list, description="Expected outputs")
    created_at: datetime = Field(default_factory=datetime.utcnow)
    started_at: Optional[datetime] = Field(None, description="When task started")
    completed_at: Optional[datetime] = Field(None, description="When task completed")
    result: Optional[TaskResult] = Field(None, description="Task result")


class ProjectState(BaseModel):
    """State of an autonomous development project"""
    project_id: str = Field(..., description="Unique project identifier")
    name: str = Field(..., description="Project name")
    goal: str = Field(..., description="High-level project goal")
    status: str = Field(default="planning", description="Project status")
    tasks: List[Task] = Field(default_factory=list, description="Project tasks")
    artifacts: List[Dict[str, Any]] = Field(default_factory=list, description="Project artifacts")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Project metadata")
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)


class DevelopmentPlan(BaseModel):
    """Development plan generated by architect agent"""
    project_id: str = Field(..., description="Project identifier")
    goal: str = Field(..., description="Project goal")
    analysis: Dict[str, Any] = Field(default_factory=dict, description="Analysis results")
    architecture: Dict[str, Any] = Field(default_factory=dict, description="System architecture")
    tasks: List[Task] = Field(default_factory=list, description="Development tasks")
    dependencies: Dict[str, List[str]] = Field(default_factory=dict, description="Task dependencies")
    estimated_duration_ms: int = Field(default=0, description="Estimated total duration")
    created_at: datetime = Field(default_factory=datetime.utcnow)
